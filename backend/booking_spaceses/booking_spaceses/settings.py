"""
Django settings for booking_spaceses project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Проверка и логирование критических переменных окружения
def get_env_var(var_name, default=None, required=False):
    value = os.getenv(var_name, default)
    if required and not value:
        logger.error(f"Required environment variable {var_name} is not set!")
        raise ValueError(f"Required environment variable {var_name} is not set!")
    logger.info(f"Environment variable {var_name}: {value if not var_name.endswith('PASSWORD') else '***'}")
    return value

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var('SECRET_KEY', 'your-secret-key', required=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var('DEBUG', 'False').lower() == 'true'

# Настройки хостов
ALLOWED_HOSTS = get_env_var('DJANGO_ALLOWED_HOSTS', 'localhost 127.0.0.1 [::1]').split()
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://booking.dixer.keenetic.link",
    "https://booking.dixer.keenetic.link",
    "http://localhost",
    "http://localhost:8080",
    "http://127.0.0.1",
    "http://45.12.145.84",
    "http://192.168.1.79:8080",
    "http://192.168.1.79",
    
]

CSRF_COOKIE_SECURE = False  # Разрешаем передачу CSRF-токена по HTTP
SESSION_COOKIE_SECURE = False

# Настройки базы данных
DB_NAME = get_env_var('POSTGRES_DB', 'booking_spaces')
DB_USER = get_env_var('POSTGRES_USER', 'postgres')
DB_PASSWORD = get_env_var('POSTGRES_PASSWORD', 'postgres')
DB_HOST = get_env_var('POSTGRES_HOST', 'host.docker.internal')
DB_PORT = get_env_var('POSTGRES_PORT', '5432')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': "booking",
#         'USER': "postgres",
#         'PASSWORD': "DXF-ffg105580",
#         'HOST': "localhost",
#         'PORT': "5432",
#     }
# }

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'accounts',
    'booking',
    'corsheaders'
]

REST_FRAMEWORK = {
    'UPLOADED_FILES_USE_URL': False,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'booking_spaceses.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'booking_spaceses.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Разрешить передачу кук и заголовков авторизации
CORS_ALLOW_CREDENTIALS = True

# Разрешенные HTTP-методы
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS',
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()

# Для HTTP (на время разработки)
CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False

# Разрешенные заголовки
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Vladivostok'

USE_I18N = True

USE_TZ = True

# Настройки Whitenoise
STATIC_URL = '/django_static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Для медиафайлов
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Важно для работы за прокси
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'http')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # Security settings
# if not DEBUG:
#     CSRF_COOKIE_SECURE = True
#     SESSION_COOKIE_SECURE = True
#     SECURE_SSL_REDIRECT = False
#     SECURE_HSTS_SECONDS = 31536000
#     SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#     SECURE_HSTS_PRELOAD = True
# else:
#     CSRF_COOKIE_SECURE = False
#     SESSION_COOKIE_SECURE = False
